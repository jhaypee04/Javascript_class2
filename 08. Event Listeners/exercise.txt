// Exerecise 1
//  Personalize your web pages. Allow users to change the theme of the page display
// between regular mode and dark mode.
// 1. Within a simple HTML document, set up a Boolean value variable to use that will toggle the color modes.
// 2. Use window.onclick to set up a function that outputs a message in the console when clicked. You can use the value of the Boolean variable.
// 3. Within the function, add a condition that checks whether the darkMode variable is true or false.
// 4. If false, then update the page style to a background color of black and a font
// color of white.
// 5. Add an else response that changes the color of the background to white and
// the color of the text to black. Also, update the value of the darkMode variable
// accordingly.


Exercise 2: Dynamically change the background of each div's color
1. Create several divs with color names in textContent.
2.Add JavaScript to add click event listeners to each element, and as each element is clicked, update the
background color of the body to match the color name in the div.

Exercise 3: Mouse Events
Our aim is to change the background color of the element on the page as the various
mouse events occur. On mousedown over the element, the element will turn green.
When the mouse is over the element, it will turn red. As the mouse moves out of the
element boundaries, the color will turn yellow. When the mouse is clicked, the color
will go green, and when the mouse is released, it will change to blue. The actions also
be logged in the console.
1. Create a blank element on the page and assign a class to it.
2. Select the element using its class name.
3. Assign a variable to the element object from the page.
4. Update the content of the element to say hello world.
5. Using the style properties of the element, update the height and width, then
add a default background color to it.
6. Create a function to handle two arguments, the first being a color value as a
string and the second being the event object of the trigger.
7. In the function, output the color value to the console, and for the event,
output the event type to the console.
8. Add event listeners to the element: mousedown, mouseover, mouseout, and
mouseup. For each of these events, send two arguments to the function that
you created: a color value and the event object.
9. Run the code and try it in your browser


By recognizing key presses and detecting the values of characters as key presses
occur with the element in focus, we can also detect if content is pasted into an input

field.

Class Assignment
A common problem that we can solve with recursion is calculating the factorial.

Quick mathematics refresher about factorials:
The factorial of a number is the product of all positive integers
bigger than 0, up to the number itself. So for example, the factorial
of seven is 7 * 6 * 5 * 4 * 3 * 2 * 1. You can write this as 7!.



How are recursive functions going to help us calculate the factorial? We are going to
call the function with a lower number until we reach 0. In this exercise, we will use
recursion to calculate the factorial result of a numeric value set as the argument of a
function.
1. Create a function that contains a condition within it checking if the argument
value is 0.
2. If the parameter is equal to 0, it should return the value of 1. Otherwise, it
should return the value of the argument multiplied by the value returned
from the function itself, subtracting one from the value of the argument
that is provided. This will result in running the block of code until the value
reaches 0.
3. Invoke the function, providing an argument of whatever number you want
to find the factorial of. The code should run whatever number is passed
initially into the function, decreasing all the way to 0 and outputting the
results of the calculation to the console. It could also contain a console.log()
call to print the current value of the argument in the function as it gets
invoked.

Change and update the number to see how it affects the results.

Exercise 4: keyboard events

1. Create two input fields within your HTML. Add an element to output
content into.
2. Using JavaScript, select the page elements. You can assign a variable called
output to the element with a class of output. Create another variable, eles,
and select all the input fields (using querySelectorAll()) as its value. This
way, we can loop through the node list and assign the same events to all the
matching elements.
3. Using for loop iterate through all the input elements from the page. Add
the same event listeners to all of them.
4. Add a keydown event listener and check if the value is a number. If it is a
number, then add it to the output area.
5. On keyup, output to the console the value of the key.
6. Check if there was a paste in the input field; if there was, then you can output
the word paste to the console.